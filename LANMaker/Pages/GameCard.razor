@using LANMaker.Data
@using System.Threading
@inject GameRunService GameRunService
@inject InstallerService InstallerService
@inject NavigationManager NavigationManager

<div class="card me-2 mb-2" style="width: 18rem;">
	<div class="d-flex justify-content-center bg-secondary" @onclick="() => ViewGame(Game.ServerGame.Name)">
		<img src="@Game.ServerGame.PosterUrl" alt="@Game.ServerGame.Name Poster" style="width: 18rem; height: 18rem; object-fit: contain;">
	</div>
	<div class="card-body">
		<h5 class="card-title">@Game.ServerGame.Name</h5>

		@if (Game.IsInstalled)
		{
			<button class="btn btn-success me-2" @onclick="() => PlayGame(Game.ClientGame)">Play</button>
			@if (IsInstalledView)
			{
				<button class="btn btn-danger me-2" @onclick="() => DeleteGame(Game.ClientGame)">Uninstall</button>
			}
		}
		else
		{
			<button class="btn btn-primary me-2" @onclick="() => Install(Game.ServerGame)">Install</button>
		}
		@*
		<p class="card-text">@game.Description</p>
		*@
	</div>
</div>

@code {
    [Parameter]
    public bool IsInstalledView { get; set; }

    [Parameter]
    public CombinedGame Game { get; set; }

	private async Task Install(ServerGame game)
	{
		NavigationManager.NavigateTo("/downloads");
		await InstallerService.InstallGame(game, new CancellationToken());
	}

	private async Task PlayGame(ClientGame game)
	{
		await GameRunService.PlayGame(game);
	}

	private async Task DeleteGame(ClientGame game)
	{
		await InstallerService.DeleteGame(game, new CancellationToken());
	}

	private async Task ViewGame(string name)
	{
		NavigationManager.NavigateTo($"/game/{name}");
	}
}
