@page "/configure"

@using System.Threading
@using LANMaker.Data
@using LANMaker.Enums
@using LANMaker.Services
@using System.ComponentModel.DataAnnotations
@using System.Reflection
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject ConfigurationService ConfigurationService
@inject ManifestService ManifestService

<h1>Settings</h1>

<p>Add your LAN coordinator's server manifest URL below.</p>

@if (configuration == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<EditForm Model="@configuration">
		@* OnValidSubmit="@HandleValidSubmit" *@
		<div class="mb-3">
			<label class="form-label" for="manifestUrl">Manifest URL</label>
			<InputText class="form-control" id="manifestUrl" @bind-Value="configuration.ManifestUrl" />
		</div>

		<div class="mb-3">
			<label class="form-label" for="timeoutMinutes">Download Timeout (Minutes)</label>
			<InputNumber class="form-control" id="timeoutMinutes" @bind-Value="configuration.TimeoutMinutes" />
		</div>

		<div class="mb-3">
			<label class="form-label" for="themeName">Interface Theme</label>
			<InputSelect @bind-Value="configuration.ThemeName" class="form-select">
				@foreach (Enum theme in Enum.GetValues(typeof(ThemeEnum)))
				{
					var themeAttribute = theme
						.GetType()?
						.GetMember(theme.ToString())?
						.First()?
						.GetCustomAttribute<DisplayAttribute>();
					var themeKey = themeAttribute.ShortName;
					var themeLabel = themeAttribute.Name;

					<option value="@themeKey">@themeLabel</option>
				}
			</InputSelect>
		</div>
		
		<div class="mb-3">
			<button class="btn btn-primary" @onclick="() => HandleValidSubmit()">
				<span class="oi oi-pencil" aria-hidden="true"></span> Save
			</button>
			<button class="btn btn-secondary" @onclick="() => UpdateManifest()">
				<span class="oi oi-reload" aria-hidden="true"></span> Refresh Manifest
			</button>
		</div>
	</EditForm>
}

@code {
	private Configuration configuration;

	protected override async Task OnInitializedAsync()
	{
		configuration = StateContainer.Configuration;
	}

	private async Task HandleValidSubmit()
	{
		await ConfigurationService.SaveConfiguration(configuration);
		await UpdateManifest();
	}

	private async Task UpdateManifest()
	{
		await ManifestService.UpdateManifest(new CancellationToken());
		NavigationManager.NavigateTo("/");
	}
}
